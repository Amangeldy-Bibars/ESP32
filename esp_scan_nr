#include <WiFi.h>
#include <HTTPClient.h>
 #include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>

const char* ssid = "FLATRON";
const char* password =  "1234567890123";

int po =1, po2=0;
int scanTime = 30; 
String s5=" ", s6=" ";
BLEScan* pBLEScan;

class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks 
{
    void onResult(BLEAdvertisedDevice advertisedDevice) 
    {
      //Serial.printf("Advertised Device: %s \n", advertisedDevice.toString().c_str());
     //advertisedDevice.toString().c_str()      
    
      if(po2 == po)
      {
        Serial.println(po);
        Serial.println(po2);
        String s1(advertisedDevice.toString().c_str());
      
        String s3(advertisedDevice.getRSSI());
        //String s2 = "{ \"value\": \"Device: 8, RSSI: " + s3 + ", " + s1 + "\"}";
        
        s5 = s5 + " Device : 1, RSSI: " + s3 + ", " + s1 + ";";
        Serial.println(s5);
      }
      else 
      {
        po2=po;
        Serial.println(po);
        Serial.println(po2);
        String s1(advertisedDevice.toString().c_str());
      
        String s3(advertisedDevice.getRSSI());
        //String s2 = "{ \"value\": \"Device: 8, RSSI: " + s3 + ", " + s1 + "\"}";
        
        s5 = s5 + "Device : 1, RSSI: " + s3 + ", " + s1 + ";";
        Serial.println(s5);

        //s5 = s5 + "\"}";


       
     
      }
  
    //Serial.println(po);
  
  //Serial.println("\n RSSI\n");
  //Serial.println(s3);  
  //Serial.println(advertisedDevice.getRSSI());
      
 
   //else{
 
    //Serial.print("Error on sending POST: ");
    //Serial.println(httpResponseCode);
 
   //} 
     
 
 
      
    }
};

void setup() {
 
  Serial.begin(115200);
  delay(4000); 
 
  WiFi.begin(ssid, password); 
 
  while (WiFi.status() != WL_CONNECTED) { 
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
 
  Serial.println("Connected to the WiFi network");
delay(2000);
  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan(); 
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);  
 delay(2000);
}
 
void loop() 
{ 
  Serial.println("go1");
  if(po == 1) po=0;
  else if(po == 0) po =1;


  //s5 = "{\"NotParsed\" : \"";
  s5 = "{\"value\" : \"";
  BLEScanResults foundDevices = pBLEScan->start(scanTime, false);
  delay(2000);
  //Serial.print("Devices found: ");
  //Serial.println(foundDevices.getCount());

   WiFi.begin(ssid, password); 
 
        
       
        Serial.println("Connected to the WiFi network");
  
        if(WiFi.status()== WL_CONNECTED)
        {  
     
           HTTPClient http;   
         
           http.begin("http://95.161.225.76/testClassifier/api/BLE/GettingValues");
             
           http.addHeader("Content-Type", "application/json; charset=utf-8");
           s5 = "{ \"value\" : \"";
           s6 = s5+ "test2\"}";
           
           //"{ \"value\": \""+s1+"\"}"
           int httpResponseCode = http.POST(s6);
           Serial.println("POST");
           Serial.println(s6);

           if(httpResponseCode>0)
           {
 
            String response = http.getString();                       
         
            Serial.println(httpResponseCode);  
            Serial.println(response);           
       
          }
         else{
 
    Serial.print("Error on sending POST: ");
    Serial.println(httpResponseCode);
 
   }
          http.end();
        }   
    
        else
        {
     
        Serial.println("Error in WiFi connection");   
     
        }

        delay(1000);
  
  //Serial.println("Scan done");
  pBLEScan->clearResults();  

  //po++;
  
  Serial.println("end1");
  s5 = s5 + "\"}";
  delay(2000);
  
 
}
